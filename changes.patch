diff --git a/src/Renderer/Model/ModelType.fs b/src/Renderer/Model/ModelType.fs
index 222ab842..e0eb52a1 100644
--- a/src/Renderer/Model/ModelType.fs
+++ b/src/Renderer/Model/ModelType.fs
@@ -453,6 +453,8 @@ type Msg =
     | UpdateDrawBlockTestState of ((TestState option) -> (TestState option))
     /// For Dev Mode to set params
     | SelectBeautifyLevel of BeautifyLevel
+    | SelectTracking of bool * ((string list) option)
+    | ToggleSettingsMenu
     | ToggleBeautifyMenu
     | ToggleSheetStats
     | ToggleSymbolInfoTable
@@ -620,6 +622,9 @@ type Model =
         /// Has a value after a test has been run.
         DrawBlockTestState: TestState option
         /// New feauture: set the level of beautifying the circuit
+        SettingsMenuExpanded: bool
+        Tracking: bool
+        CachedSheetStats: string list option
         BeautifyMenuExpanded: bool
         BeautifyLevel: BeautifyLevel
         SymbolInfoTableExpanded: bool
diff --git a/src/Renderer/TestDrawBlockD1.fs b/src/Renderer/TestDrawBlockD1.fs
index db26886c..76e9d443 100644
--- a/src/Renderer/TestDrawBlockD1.fs
+++ b/src/Renderer/TestDrawBlockD1.fs
@@ -473,6 +473,25 @@ module HLPTick3 =
         |> flipSymbol "G1" andFlip
     // |> separateAllWires does not make a difference in testing
 
+    let test3SampleComponents: (ComponentType * float * float) list =
+        [ GateN(And, 2), 45.0, 45.0
+          Not, 30.0, 30.0
+          Mux2, 90.0, 60.0
+          Input1(1, Some 1), 30.0, 60.0
+          Output 1, 30.0, 60.0
+          DFF, 75.0, 75.0 ]
+    // function to sample a random uniform number from -10, 10
+    let perturbationNoise =
+        let rnd = System.Random()
+        fun () -> rnd.Next(-10, 10)
+
+    let increasingPositions = fromList [ 1..9 ]
+    let makeTest3Circuit (startPos: XYPos) =
+        initSheetModel
+        |> placeSymbol "G1" (GateN(And, 2)) startPos
+        |> Result.bind (placeSymbol "FF1" DFF startPos)
+        |> getOkOrFail
+
     let vertLinePositions: Gen<XYPos> =
         fromList [ -100..20..100 ]
         |> map (fun n -> middleOfSheet + { X = 0.; Y = float n })
@@ -589,11 +608,22 @@ module HLPTick3 =
                 "Horizontally positioned AND + DFF: fail on sample 0"
                 firstSample
                 horizLinePositions
-                makeTest1Circuit
-                (Asserts.failOnSampleNumber 0)
+                makeTest3Circuit
+                (Asserts.failOnAllTests)
                 dispatch
             |> recordPositionInTest testNum dispatch
 
+        // let test1 testNum firstSample dispatch =
+        //     printf "Test1"
+        //     runTestOnSheets
+        //         "Horizontally positioned AND + DFF: fail on sample 0"
+        //         firstSample
+        //         horizLinePositions
+        //         makeTest1Circuit
+        //         (Asserts.failOnSampleNumber 0)
+        //         dispatch
+        //     |> recordPositionInTest testNum dispatch
+
         /// Example test: Horizontally positioned AND + DFF: fail on sample 10
         let test2 testNum firstSample dispatch =
             runTestOnSheets
@@ -713,4 +743,4 @@ module HLPTick3 =
             | "Next Test Error", None ->
                 printf "Test Finished"
                 ()
-            | _ -> func testIndex 0 dispatch
\ No newline at end of file
+            | _ -> func testIndex 0 dispatch
diff --git a/src/Renderer/UI/DeveloperModeView.fs b/src/Renderer/UI/DeveloperModeView.fs
index 3541c60c..ec785741 100644
--- a/src/Renderer/UI/DeveloperModeView.fs
+++ b/src/Renderer/UI/DeveloperModeView.fs
@@ -131,6 +131,17 @@ let findHoveredID (pos: XYPos) (model: SheetT.Model) =
 let developerModeView (model: ModelType.Model) dispatch =
     let sheetDispatch sMsg = dispatch (Sheet sMsg)
 
+    let counterItems =
+        [ ("Wire-Sym Intersects", (countVisibleSegsIntersectingSymbols model.Sheet).ToString())
+          ("Wire-Wire Intersects", (countVisibleSegsPerpendicularCrossings model.Sheet).ToString())
+          ("Sym-Sym Intersects", (countIntersectingSymbolPairs model.Sheet).ToString())
+          ("90ยบ Degree Wire Bends", (countVisibleBends model.Sheet).ToString())
+          ("Near-Straight Wires", (countAlmostStraightWiresOnSheet model.Sheet).ToString())
+          ("Singly-Conn Wires", (countSinglyConnectedWires model.Sheet).ToString())
+          ("Vis. Seg. Length", (countVisibleSegmentLength model.Sheet).ToString("F1"))
+          //   ("Sym-Sym Overlap", (countIntersectingSymbolPairsWithOverlapArea model.Sheet).ToString()) ]
+          ("Free Space!!!", ":)") ]
+
     let menuItem menuName description (level: BeautifyLevel) dispatch =
 
         Menu.Item.li
@@ -138,6 +149,26 @@ let developerModeView (model: ModelType.Model) dispatch =
               Menu.Item.OnClick(fun _ -> dispatch (SelectBeautifyLevel level)) ]
             [ strong [] [ str menuName ]; p [] [ str description ] ]
 
+    let trackingMenuItem trackingMenuName (tracking: bool) (cachedStringData: (string list) option) dispatch =
+        Menu.Item.li
+            [ (Menu.Item.IsActive(tracking = model.Tracking))
+              Menu.Item.OnClick(fun _ -> dispatch (SelectTracking(tracking, cachedStringData))) ]
+            [ strong [] [ str trackingMenuName ] ]
+
+    let settingsMenu =
+        let settingsMenu =
+            Menu.menu
+                []
+                [ Menu.list
+                      []
+                      [ trackingMenuItem "Turn On Tracker" true None dispatch
+                        trackingMenuItem "Turn Off Tracker" false None dispatch ] ]
+
+        details
+            [ Open(model.SettingsMenuExpanded) ]
+            [ summary [ menuLabelStyle; OnClick(fun _ -> dispatch (ToggleSettingsMenu)) ] [ str "Settings " ]
+              div [] [ settingsMenu ] ]
+
     /// A drop down menu that allows the user to select the level of beautification. Open/close state persists between updates thanks to
     /// a bool in the model called model.BeautifyMenuExpanded
     let beautificationLevelSelect =
@@ -165,38 +196,73 @@ let developerModeView (model: ModelType.Model) dispatch =
               p [] [ str "Sample Text 3" ] ]
 
     /// Create a counter item (a title + number) for the sheet stats menu
-    let createCounterItem title value =
-        Level.item
-            [ Level.Item.HasTextCentered ]
-            [ div
+    let createCounterItem title value (cache: string option) =
+        match cache with
+        | Some cache ->
+            Level.item
+                [ Level.Item.HasTextCentered ]
+                [ div
+                      [ Style [ Width "170px" ] ]
+                      [ Level.heading [] [ str title ]
+                        strong [ Style [ FontSize "17px" ] ] [ str ((value) + "   (" + cache + ")") ] ] ]
+        | _ ->
+            Level.item
+                [ Level.Item.HasTextCentered ]
+                [ div
+                      []
+                      [ Level.heading [] [ str title ]
+                        strong [ Style [ FontSize "17px" ] ] [ str (value) ] ] ]
+
+    let trackerSetting =
+        let cachedSheetStats = counterItems |> List.map snd
+
+        div
+            [ Style [ Margin "5px 0" ] ]
+            [ Level.level
                   []
-                  [ Level.heading [] [ str title ]
-                    strong [ Style [ FontSize "20px" ] ] [ str value ] ] ]
+                  [ Level.item
+                        [ Level.Item.HasTextCentered ]
+                        [ div
+                              []
+                              [ Menu.list
+                                    []
+                                    [ trackingMenuItem "Turn On Tracker" (true) (Some cachedSheetStats) dispatch ] ] ]
+                    Level.item
+                        [ Level.Item.HasTextCentered ]
+                        [ div [] [ Menu.list [] [ trackingMenuItem "Turn Off Tracker" (false) None dispatch ] ]
+
+                          ] ]
+
+              ]
+    // trackingMenuItem "Turn On Tracker" "Keep track of changes across stats" (true) dispatch
 
     /// Create a list of counter items for the sheet stats menu. Can be expanded to include more stats
     /// Functions take in a SheetT.Model and output a string/int/float
     let counters =
-        let counterItems =
-            [ ("Wire-Sym Intersects", (countVisibleSegsIntersectingSymbols model.Sheet).ToString())
-              ("Wire-Wire Intersects", (countVisibleSegsPerpendicularCrossings model.Sheet).ToString())
-              ("Sym-Sym Intersects", (countIntersectingSymbolPairs model.Sheet).ToString())
-              ("90ยบ Degree Wire Bends", (countVisibleBends model.Sheet).ToString())
-              ("Near-Straight Wires", (countAlmostStraightWiresOnSheet model.Sheet).ToString())
-              ("Singly-Conn Wires", (countSinglyConnectedWires model.Sheet).ToString())
-              ("Vis. Seg. Length", (countVisibleSegmentLength model.Sheet).ToString("F2"))
-              //   ("Sym-Sym Overlap", (countIntersectingSymbolPairsWithOverlapArea model.Sheet).ToString()) ]
-              ("Free Space!!!", ":)") ]
-
-        counterItems
-        |> List.chunkBySize 2
-        |> List.map (fun chunk ->
-            div
-                [ Style [ Margin "5px 0" ] ]
-                [ Level.level
-                      []
-                      (chunk
-                       |> List.map (fun (title, value) -> createCounterItem title value)) ])
-        |> div []
+        match model.CachedSheetStats with
+        | Some cachedSheetStats ->
+            let cachedChunks = cachedSheetStats |> List.chunkBySize 2
+            let counterChunks = counterItems |> List.chunkBySize 2
+            (cachedChunks, counterChunks)
+            ||> List.map2 (fun cachedChunk counterChunk ->
+                div
+                    [ Style [ Margin "5px 0" ] ]
+                    [ Level.level
+                          []
+                          ((cachedChunk, counterChunk)
+                           ||> List.map2 (fun cache (title, value) -> createCounterItem title value (Some cache))) ])
+            |> div []
+        | _ ->
+            let counterChunks = counterItems |> List.chunkBySize 2
+            (counterChunks)
+            |> List.map (fun counterChunk ->
+                div
+                    [ Style [ Margin "5px 0" ] ]
+                    [ Level.level
+                          []
+                          (counterChunk
+                           |> List.map (fun (title, value) -> createCounterItem title value None)) ])
+            |> div []
 
     /// Stores string details of the currently hovered comp to be used in sheetStatsMenu
     let hoveredType, hoveredId = findHoveredID model.Sheet.LastMousePos model.Sheet
@@ -225,7 +291,8 @@ let developerModeView (model: ModelType.Model) dispatch =
                           br []
                           code [] [ str (hoveredId) ] ]
 
-                    counters ] ]
+                    counters
+                    trackerSetting ] ]
 
     /// Function to programmatically generate a html table from PortMaps.Order
     let createTableFromPortMapsOrder (map: Map<Edge, string list>) =
diff --git a/src/Renderer/UI/MainView.fs b/src/Renderer/UI/MainView.fs
index 95029c3c..a3b8f27e 100644
--- a/src/Renderer/UI/MainView.fs
+++ b/src/Renderer/UI/MainView.fs
@@ -116,6 +116,9 @@ let init () =
       Pending = []
       UIState = None
       BuildVisible = false
+      SettingsMenuExpanded = false
+      Tracking = false
+      CachedSheetStats = None
       BeautifyLevel = Level1
       BeautifyMenuExpanded = false
       SymbolInfoTableExpanded = true
diff --git a/src/Renderer/UI/Update.fs b/src/Renderer/UI/Update.fs
index b4e52c3c..8c3b3a72 100644
--- a/src/Renderer/UI/Update.fs
+++ b/src/Renderer/UI/Update.fs
@@ -621,6 +621,12 @@ let update (msg: Msg) oldModel =
         | Level2 -> printfn "Set Beautify Level to 2"
         | Level3 -> printfn "Set Beautify Level to 3"
         { oldModel with BeautifyLevel = level }, Cmd.none
+    | ToggleSettingsMenu -> { oldModel with SettingsMenuExpanded = not oldModel.SettingsMenuExpanded }, Cmd.none
+    | SelectTracking(h: bool, cachedStringData) ->
+        match h with
+        | true -> printfn "Set Tracking to true"
+        | false -> printfn "Set Tracking to false"
+        { oldModel with Tracking = h; CachedSheetStats = cachedStringData }, Cmd.none
     | ToggleBeautifyMenu -> { oldModel with BeautifyMenuExpanded = not oldModel.BeautifyMenuExpanded }, Cmd.none
     | ToggleSheetStats -> { model with SheetStatsExpanded = not model.SheetStatsExpanded }, Cmd.none
     | ToggleSymbolInfoTable -> { model with SymbolInfoTableExpanded = not model.SymbolInfoTableExpanded }, Cmd.none
diff --git a/src/Renderer/UI/UpdateHelpers.fs b/src/Renderer/UI/UpdateHelpers.fs
index cebba303..920fbc52 100644
--- a/src/Renderer/UI/UpdateHelpers.fs
+++ b/src/Renderer/UI/UpdateHelpers.fs
@@ -193,8 +193,10 @@ let shortDisplayMsg (msg: Msg) =
     | ExecCmdAsynch _ -> Some "ExecCmdAsynch"
     | SendSeqMsgAsynch _ -> Some "SendSeqMsgAsynch"
     | UpdateDrawBlockTestState _ -> None
-    | SelectBeautifyLevel _ -> None
+    | ToggleSettingsMenu -> None
+    | SelectTracking _ -> None
     | ToggleBeautifyMenu -> None
+    | SelectBeautifyLevel _ -> None
     | ToggleSymbolInfoTable -> None
     | ToggleSymbolPortsTable -> None
     | ToggleSymbolPortMapsTable -> None
